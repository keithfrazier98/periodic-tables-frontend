[{"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/index.js":"1","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/App.js":"2","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Layout.js":"3","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Routes.js":"4","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Menu.js":"5","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/NotFound.js":"6","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/dashboard/Dashboard.js":"7","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/date-time.js":"8","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/ErrorAlert.js":"9","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/api.js":"10","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/format-reservation-date.js":"11","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewTable.js":"12","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Edit.js":"13","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewReservation.js":"14","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/SeatReservation.js":"15","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Search.js":"16","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationForm.js":"17","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationCard.js":"18"},{"size":286,"mtime":1625935242455,"results":"19","hashOfConfig":"20"},{"size":333,"mtime":1625935242454,"results":"21","hashOfConfig":"20"},{"size":559,"mtime":1631691902136,"results":"22","hashOfConfig":"20"},{"size":1463,"mtime":1625940860756,"results":"23","hashOfConfig":"20"},{"size":1794,"mtime":1631692271682,"results":"24","hashOfConfig":"20"},{"size":327,"mtime":1625935242456,"results":"25","hashOfConfig":"20"},{"size":7537,"mtime":1631736257059,"results":"26","hashOfConfig":"20"},{"size":2565,"mtime":1625938630557,"results":"27","hashOfConfig":"20"},{"size":486,"mtime":1625935242455,"results":"28","hashOfConfig":"20"},{"size":4868,"mtime":1631690166824,"results":"29","hashOfConfig":"20"},{"size":628,"mtime":1625935242457,"results":"30","hashOfConfig":"20"},{"size":2409,"mtime":1625939119669,"results":"31","hashOfConfig":"20"},{"size":785,"mtime":1626046998587,"results":"32","hashOfConfig":"20"},{"size":693,"mtime":1625940078849,"results":"33","hashOfConfig":"20"},{"size":5126,"mtime":1626119092060,"results":"34","hashOfConfig":"20"},{"size":3162,"mtime":1626118188598,"results":"35","hashOfConfig":"20"},{"size":9572,"mtime":1626120275188,"results":"36","hashOfConfig":"20"},{"size":5324,"mtime":1631736890445,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1r90hqo",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/index.js",[],["78","79"],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/App.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Layout.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Routes.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Menu.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/NotFound.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/dashboard/Dashboard.js",["80","81","82"],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/date-time.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/ErrorAlert.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/api.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/format-reservation-date.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewTable.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Edit.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewReservation.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/SeatReservation.js",["83"],"import React, { useState, useEffect } from \"react\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport {\n  listTables,\n  assignResIdToTable,\n  getReservation,\n} from \"../utils/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nfunction SeatReservation() {\n  const { reservation_id } = useParams();\n  const history = useHistory();\n\n  ////// \\/ load tables \\/ \\\\\\\\\\\\\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n  useEffect(loadTables, [reservation_id]);\n\n  function loadTables() {\n    const abortController = new AbortController();\n    setTablesError(null);\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\n    return () => abortController.abort();\n  }\n\n  const tablesList = tables.map((table) => {\n    if (!table.reservation_id) {\n      return (\n        <option\n          key={table.table_id}\n          value={table.table_id}\n          name={table.table_name}\n          cap={table.capacity}\n        >\n          {table.table_name} - {table.capacity}\n        </option>\n      );\n    } else {\n      return null;\n    }\n  });\n\n  // \\/Load reservation\\/ \\\\\n  useEffect(() => {\n    loadReservationData();\n  }, []);\n\n  const [reservation, setReservation] = useState(\"\");\n  const [reservationError, setReservationError] = useState(null);\n  const [reservationElement, setReservationElement] = useState(\"\");\n\n  async function loadReservationData() {\n    const abortController = new AbortController();\n    try {\n      const reservation = await getReservation(\n        reservation_id,\n        abortController.signal\n      );\n      setReservation(reservation);\n      setReservationElement(\n        (reservationElement) =>\n          (reservationElement = (\n            <div>\n              <h4>The {reservation.last_name} party</h4>\n              <h5>Reservation Holder:</h5>{\" \"}\n              <p>\n                {reservation.last_name}, {reservation.first_name}\n              </p>\n              <h5>Phone Number</h5> <p>{reservation.mobile_number}</p>\n              <h5>Party of:</h5> <p>{reservation.people} people</p>\n              <h5>Reservation Time</h5>\n              <p>{reservation.reservation_time}</p>\n            </div>\n          ))\n      );\n    } catch (error) {\n      setReservationError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  // \\/handle select state\\/ \\\\\n\n  const [selection, setSelection] = useState(\"select a table\");\n  const [tableCap, setTableCap] = useState(\"\");\n  const [partyIsSmallerThanCap, setPartyIsSmallerThanCap] = useState(true);\n  const [nothingSelected, setNothingSelected] = useState(true);\n\n  function handleChange(event) {\n    setNothingSelected(false);\n    let count = 0;\n    while (event.target[count]) {\n      if (event.target[count].getAttribute(\"value\") === event.target.value) {\n        const tableCap = event.target[count].getAttribute(\"cap\");\n        setTableCap(tableCap);\n      }\n      setSelection(event.target.value);\n      count++;\n    }\n  }\n\n  /// \\/ assign table \\/ \\\\\\\\\n\n  function partyIsSmallerThanCapacity() {\n    return Number(tableCap) >= Number(reservation.people);\n  }\n\n  async function handleSubmit(event) {\n    const abortController = new AbortController();\n    event.preventDefault();\n    const partyIsSmallerThanCap = partyIsSmallerThanCapacity();\n\n    if (partyIsSmallerThanCap) {\n      setPartyIsSmallerThanCap(true);\n      //await changeStatus(\"seated\", reservation_id);\n      await assignResIdToTable(\n        reservation_id,\n        selection,\n        abortController.signal\n      );\n      history.push(`/dashboard?date=${reservation.reservation_date.substring(0,10)}`);\n    } else {\n      setPartyIsSmallerThanCap(false);\n    }\n    return () => abortController.abort();\n  }\n\n  function handleCancel() {\n    history.push(`/dashboard?date=${reservation.reservation_date.substring(0,10)}`);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\"></div>\n      <h4>Choose table to seat reservation #{reservation_id}</h4>\n      <div>\n        <h3>Reservation information:</h3>\n        <ErrorAlert error={reservationError} />\n        {reservationElement}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <h5>Available tables:</h5>\n          <ErrorAlert error={tablesError} />\n          <select name=\"table_id\" onChange={handleChange}>\n            {nothingSelected ? <option>select a table</option> : null}\n            {tablesList}\n          </select>\n        </label>\n        <div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Seat Table\n          </button>\n          <button\n            type=\"reset\"\n            onClick={handleCancel}\n            className=\"btn btn-warning\"\n          >\n            Cancel\n          </button>\n          <div>\n            {partyIsSmallerThanCap ? null : (\n              <p className=\"alert alert-danger\">\n                Please make a new table selection. (Capacity may be too small\n                for reservation.)\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SeatReservation;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Search.js",["84","85"],"import React, { useEffect, useState } from \"react\";\nimport { searchByNumber } from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"./ReservationCard\";\n\nfunction Search() {\n  const placeholder = \"Enter a customer's phone number\";\n  const [reservations, setReservations] = useState([]);\n  const [mobile_number, setMobileNumber] = useState(placeholder);\n  const [searchError, setSearchError] = useState(\"\");\n  const [emptySearch, setEmptySearch] = useState(true);\n  const [noResultsFound, setNoResultsFound] = useState(true);\n  const [clicked, setClicked] = useState(0)\n  useEffect(() => {\n    loadReservations();\n  }, [mobile_number, clicked]);\n\n  async function loadReservations() {\n    try {\n      if (mobile_number) {\n        const reservationResults = await searchByNumber(mobile_number);\n        setReservations(reservationResults);\n        setNoResultsFound(false)\n        if (\n          mobile_number &&\n          !reservations.length &&\n          mobile_number !== placeholder\n        ) {\n          setNoResultsFound(true);\n        }\n      } else {\n        setNoResultsFound(true);\n      }\n    } catch (error) {\n      setSearchError(error);\n      setNoResultsFound(true);\n\n    }\n  }\n\n  function search(value) {\n    if (value) {\n      setEmptySearch(false);\n      setMobileNumber(value);\n    } else {\n      setEmptySearch(true);\n      setMobileNumber(value);\n    }\n  }\n\n  function onChange({ target: { value } }) {\n    if (value !== \" \" || value !== \"\" ) search(value);\n  }\n\n  function handleSubmit(event) {\n    if(event){\n      event.preventDefault();\n    }\n    search(mobile_number);\n  }\n\n  const noResultsFoundElement = (\n    <div>\n      <h5>No reservations found</h5>\n    </div>\n  );\n\n  const emptySearchElement = (\n    <div className=\"row justify-content-center\">\n      <h4>Enter a mobile number to search reservations.</h4>\n    </div>\n  );\n\n  return (\n    <div style={{ margin: \"30px 0 30px 30px\" }}>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <ErrorAlert error={searchError} />\n          <div className=\"row align-items-end\">\n            <div className=\"col\">\n              <label className=\"w-100\">\n                <h5>Search by mobile number:</h5>\n                <input\n                  className=\"w-75 p-1\"\n                  type=\"search\"\n                  value={mobile_number}\n                  onClick={() => {if (mobile_number === placeholder) setMobileNumber(\"\")}}\n                  onChange={onChange}\n                  name=\"mobile_number\"\n                ></input>\n              </label>\n            </div>\n            <div className=\"col\">\n              <button type=\"submit\" role=\"button\" onClick={()=>{setClicked(clicked + 1)}} className=\"btn btn-primary\">\n                Find\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n      <div className=\"col p-5\">\n        {emptySearch ? (\n          emptySearchElement\n        ) : (\n          <ReservationCard reservations={reservations} />\n        )}\n      </div>\n      <div className=\"col\">{noResultsFound ? noResultsFoundElement : null}</div>\n    </div>\n  );\n}\n\nexport default Search;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationForm.js",["86","87"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { createReservation, editReservation } from \"../utils/api\";\nimport { today, formatDate, asDateString } from \"../utils/date-time\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport { changeStatus } from \"../utils/api\";\n\nconst newToday = today();\n\nfunction ReservationForm({ initialFormData }) {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const isEdit = pathname.includes(\"edit\");\n  const isNew = pathname.includes(\"new\");\n\n  const [reservation, setReservation] = useState({ ...initialFormData });\n  const [error, setError] = useState(\"\");\n  const [submitAttempt, setSubmitAttempt] = useState(false);\n\n  useEffect(() => {\n    let dateChosen = new Date(initialFormData.reservation_date);\n    if (isEdit) {\n      setReservation({\n        ...initialFormData,\n        reservation_date: asDateString(dateChosen),\n      });\n    }\n  }, [initialFormData]);\n\n  function validReservationDates({ target }) {\n    // dates must be in converted from yyyy/mm/dd to mm/dd/yyyy for Date.prototype conversion\n    const dateChosen = new Date(formatDate(target.value));\n    const today = new Date(formatDate(newToday));\n    const isNotTuesday = dateChosen.getDay() !== 2; // 2 = tuesday's index\n    const isThisDayOrAfter = dateChosen.getDate() >= today.getDate();\n    const isThisMonthOrAfter = dateChosen.getMonth() >= today.getMonth();\n    const isThisYearOrAfter = dateChosen.getFullYear() >= today.getFullYear();\n    const isAfterThisYear = dateChosen.getFullYear() - today.getFullYear() > 0;\n    if (\n      (isNotTuesday &&\n        isThisDayOrAfter &&\n        isThisMonthOrAfter &&\n        isThisYearOrAfter) ||\n      isAfterThisYear\n    ) {\n      setError(\"\");\n      setSubmitAttempt(false);\n      setReservation(\n        (form) => (form = { ...form, reservation_date: target.value })\n      );\n    } else {\n      setReservation(\n        (form) => (form = { ...form, reservation_date: target.value })\n      );\n      setError({\n        message: \"Please enter a valid date. (We are closed on tuesdays)\",\n      });\n    }\n\n    // validate time in case date was set after time\n    validReservationTimes()\n  }\n\n  function badTime() {\n    setError({\n      message:\n        \"Please enter a valid time. (We reserve tables from 10:30AM to 9:30PM.)\",\n    });\n  }\n\n  function validReservationTimes({ target } = reservation.reservation_time) {\n    let timeChosen \n\n    if(target){\n      timeChosen = target.value;\n    } else {\n      timeChosen = reservation.reservation_time\n    }\n\n    setReservation(\n      (form) => (form = { ...form, reservation_time: timeChosen })\n    );\n\n    let chosenMinutes = Number(`${timeChosen[3]}${timeChosen[4]}`);\n    let chosenHour = Number(`${timeChosen[0]}${timeChosen[1]}`);\n \n\n    const currentTime = new Date(Date.now());\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n\n    \n    //return error message if chosen time is outsisde operating hours\n\n    if (\n      (chosenHour >= 21 && chosenMinutes > 30) ||\n      chosenHour > 21 ||\n      (chosenHour <= 10 && chosenMinutes < 30) ||\n      chosenHour < 10\n    ) {\n      badTime();\n    } else {\n      setError(\"\");\n      setSubmitAttempt(false);\n    }\n\n    if (reservation.reservation_date === newToday) {\n      // if the chosen hour is later than the current hour (current hour is less than chosen hour) set reservation time\n      if (currentHour < chosenHour) {\n        setError(\"\");\n        setSubmitAttempt(false);\n      }\n      // if the chosen hour is earlier than the current hour (current hour is greater than the chosen hour ) display error message\n      else if (currentHour > chosenHour) {\n        badTime();\n      }\n      // if hours are the same check minutes\n      else {\n        // if the chosen minute is later than the current minute ( current minute is less than the chosen minute ) set reservation time\n        if (currentMinute < chosenMinutes) {\n          setError(\"\");\n          setSubmitAttempt(false);\n        }\n        // if the chosen minute is earlier than the current minute (current minute is greater than chosen minute) display error message\n        else {\n          badTime();\n        }\n      }\n    }\n  }\n\n  function handleChange({ target: { name, value } }) {\n    setReservation({ ...reservation, [name]: value });\n  }\n\n  function navigateToDashboard() {\n    history.push(`/dashboard?date=${reservation.reservation_date}`);\n  }\n\n  const [cancelled, setCancelled] = useState(\"\");\n\n  useEffect(() => {\n    if (cancelled) {\n      changeStatusCancel(cancelled);\n      navigateToDashboard();\n    }\n  }, [cancelled]);\n\n  // call api to cancel reservation\n  async function changeStatusCancel(cancelledReservation) {\n    const abortController = new AbortController();\n    await changeStatus(\n      \"cancelled\",\n      cancelledReservation,\n      abortController.signal\n    );\n    setCancelled((can) => (can = \"\"));\n    return () => abortController.abort();\n  }\n\n  function cancelBtnHandler(event) {\n    event.preventDefault();\n    if (\n      window.confirm(\n        \"Do you want to cancel this reservation? This cannot be undone.\"\n      )\n    ) {\n      setCancelled((cancelled) => (cancelled = reservation.reservation_id));\n    }\n  }\n\n  async function APIOnSubmit(event) {\n    const abortController = new AbortController();\n    setError(null);\n    //if this is an edit: call editReservation from API, else: call is createReservation from API\n    if (isEdit) {\n      try {\n        await editReservation(\n          {...reservation, people:Number(reservation.people)},\n          reservation.reservation_id,\n          abortController.signal\n        );\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    } else if (isNew) {\n      try {\n        await createReservation({...reservation, people:Number(reservation.people)}, abortController.signal);\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    }\n\n    return () => abortController.abort();\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSubmitAttempt(true);\n    if (!error) {\n      APIOnSubmit(event);\n    }\n  }\n  return (\n    <div>\n      <div>{submitAttempt ? <ErrorAlert error={error} /> : null}</div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"first_name\">First Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"first_name\"\n              value={reservation.first_name}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"last_name\">Last Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"last_name\"\n              value={reservation.last_name}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"mobile_number\">Mobile Number</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"mobile_number\"\n              value={reservation.mobile_number}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"people\">Party Size</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"people\"\n              value={reservation.people}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"reservation_date\">Date of Reservation</label>\n            <br />\n            <input\n              type=\"date\"\n              onChange={validReservationDates}\n              name=\"reservation_date\"\n              value={reservation.reservation_date}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"reservation_time\">Time of Reservation</label>\n            <br />\n            <input\n              type=\"time\"\n              onChange={validReservationTimes}\n              name=\"reservation_time\"\n              value={reservation.reservation_time}\n              required={true}\n            />\n          </div>\n        </div>\n        <div\n          style={{ margin: \"25px 0 0 0\" }}\n          className=\"row w-75 justify-content-center\"\n        >\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Submit\n          </button>\n          <button\n            onClick={() =>\n              history.push(`/dashboard?date=${reservation.reservation_date}`)\n            }\n            className=\"btn btn-secondary\"\n            type=\"cancel\"\n          >\n            Cancel\n          </button>\n          {isEdit ? (\n            <div>\n              <button onClick={cancelBtnHandler} className=\"btn btn-danger\">\n                Cancel Reservation\n              </button>\n            </div>\n          ) : null}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ReservationForm;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationCard.js",["88","89","90"],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":4,"column":3,"nodeType":"97","messageId":"98","endLine":4,"endColumn":19},{"ruleId":"99","severity":1,"message":"100","line":58,"column":6,"nodeType":"101","endLine":58,"endColumn":48,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":157,"column":21,"nodeType":"105","endLine":164,"endColumn":22},{"ruleId":"99","severity":1,"message":"106","line":46,"column":6,"nodeType":"101","endLine":46,"endColumn":8,"suggestions":"107"},{"ruleId":"99","severity":1,"message":"108","line":16,"column":6,"nodeType":"101","endLine":16,"endColumn":30,"suggestions":"109"},{"ruleId":"103","severity":1,"message":"104","line":94,"column":15,"nodeType":"105","endLine":94,"endColumn":119},{"ruleId":"99","severity":1,"message":"110","line":28,"column":6,"nodeType":"101","endLine":28,"endColumn":23,"suggestions":"111"},{"ruleId":"99","severity":1,"message":"112","line":147,"column":6,"nodeType":"101","endLine":147,"endColumn":17,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"108","line":24,"column":6,"nodeType":"101","endLine":24,"endColumn":40,"suggestions":"114"},{"ruleId":"99","severity":1,"message":"115","line":28,"column":6,"nodeType":"101","endLine":28,"endColumn":20,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":73,"column":40,"nodeType":"119","messageId":"120","endLine":73,"endColumn":42},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'listReservations' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadTables' and 'reservationsLoaded'. Either include them or remove the dependency array.","ArrayExpression",["123"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'loadReservationData'. Either include it or remove the dependency array.",["124"],"React Hook useEffect has a missing dependency: 'loadReservations'. Either include it or remove the dependency array.",["125"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'navigateToDashboard'. Either include it or remove the dependency array.",["127"],["128"],"React Hook useEffect has a missing dependency: 'formatElements'. Either include it or remove the dependency array.",["129"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [date, cancelled, finishIds, tablesLoaded, loadTables, reservationsLoaded]",{"range":"144","text":"145"},"Update the dependencies array to be: [loadReservationData]",{"range":"146","text":"147"},"Update the dependencies array to be: [mobile_number, clicked, loadReservations]",{"range":"148","text":"149"},"Update the dependencies array to be: [initialFormData, isEdit]",{"range":"150","text":"151"},"Update the dependencies array to be: [cancelled, navigateToDashboard]",{"range":"152","text":"153"},"Update the dependencies array to be: [tablesLoaded, reservationsLoaded, loadReservations]",{"range":"154","text":"155"},"Update the dependencies array to be: [formatElements, reservations]",{"range":"156","text":"157"},[1871,1913],"[date, cancelled, finishIds, tablesLoaded, loadTables, reservationsLoaded]",[1203,1205],"[loadReservationData]",[660,684],"[mobile_number, clicked, loadReservations]",[979,996],"[initialFormData, isEdit]",[4688,4699],"[cancelled, navigateToDashboard]",[741,775],"[tablesLoaded, reservationsLoaded, loadReservations]",[862,876],"[formatElements, reservations]"]