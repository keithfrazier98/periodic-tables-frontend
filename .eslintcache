[{"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/index.js":"1","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/App.js":"2","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Layout.js":"3","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Routes.js":"4","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Menu.js":"5","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/NotFound.js":"6","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/dashboard/Dashboard.js":"7","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/date-time.js":"8","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/ErrorAlert.js":"9","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/api.js":"10","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/format-reservation-date.js":"11","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewTable.js":"12","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Edit.js":"13","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewReservation.js":"14","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/SeatReservation.js":"15","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Search.js":"16","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationForm.js":"17","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationCard.js":"18"},{"size":286,"mtime":1625935242455,"results":"19","hashOfConfig":"20"},{"size":333,"mtime":1625935242454,"results":"21","hashOfConfig":"20"},{"size":550,"mtime":1625935242455,"results":"22","hashOfConfig":"20"},{"size":1463,"mtime":1625940860756,"results":"23","hashOfConfig":"20"},{"size":1817,"mtime":1625935242456,"results":"24","hashOfConfig":"20"},{"size":327,"mtime":1625935242456,"results":"25","hashOfConfig":"20"},{"size":6256,"mtime":1625941198510,"results":"26","hashOfConfig":"20"},{"size":2565,"mtime":1625938630557,"results":"27","hashOfConfig":"20"},{"size":486,"mtime":1625935242455,"results":"28","hashOfConfig":"20"},{"size":4598,"mtime":1625953958620,"results":"29","hashOfConfig":"20"},{"size":628,"mtime":1625935242457,"results":"30","hashOfConfig":"20"},{"size":2409,"mtime":1625939119669,"results":"31","hashOfConfig":"20"},{"size":755,"mtime":1625940125545,"results":"32","hashOfConfig":"20"},{"size":693,"mtime":1625940078849,"results":"33","hashOfConfig":"20"},{"size":5108,"mtime":1625940826287,"results":"34","hashOfConfig":"20"},{"size":2861,"mtime":1625940804347,"results":"35","hashOfConfig":"20"},{"size":9461,"mtime":1625939169794,"results":"36","hashOfConfig":"20"},{"size":3678,"mtime":1625939053539,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1r90hqo",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/index.js",[],["80","81"],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/App.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Layout.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Routes.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/Menu.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/NotFound.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/dashboard/Dashboard.js",["82"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  listReservations,\n  listTables,\n  finishReservation,\n  changeStatus,\n} from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"../ReservationsAndTables/ReservationCard\";\nimport \"./Dashboard.css\";\n\n/**\n * Defines the dashboard page.\n * @param date\n *  the date for which the user wants to view reservations.\n * @returns {JSX.Element}\n */\n\n//additional hook is needed to get query param from url\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction Dashboard({ date }) {\n  //////  \\/ load reservations \\/  //////\n  //overide default date if \"date\" is present in query param\n  let location = useQuery().get(\"date\");\n  if (location) date = location;\n\n  //states for reservation data and errors\n  const [reservations, setReservations] = useState([]);\n  const [reservationsError, setReservationsError] = useState(null);\n\n  //states for finishing or canceling reservations\n  const [finishIds, setFinishIds] = useState({ tableId: \"\", resId: \"\" });\n  const [cancelled, setCancelled] = useState(\"\");\n\n  //states for tables data and errors\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n\n  //called on initial render and state update to render table\n  //and reservation data\n  useEffect(() => {\n    loadTables();\n    loadReservations();\n    if (cancelled) {\n      changeStatusCancel(cancelled);\n    }\n  }, [date, cancelled, finishIds]);\n\n  // call api to cancel reservation\n  async function changeStatusCancel(cancelledReservation) {\n    const abortController = new AbortController();\n    await changeStatus(\n      \"cancelled\",\n      cancelledReservation,\n      abortController.signal\n    );\n    setCancelled((cancelled) => (cancelled = \"\"));\n    return () => abortController.abort();\n  }\n\n  // call api to load reservation data\n  async function loadReservations() {\n    const abortController = new AbortController();\n    const { resId } = finishIds;\n    try {\n      if (resId) {\n        try {\n          await changeStatus(\"finished\", resId, abortController.signal);\n        } catch (error) {\n          setReservationsError(error);\n        }\n      }\n\n      setReservationsError(null);\n      const result = await listReservations({ date }, abortController.signal);\n      result.filter(\n        (reservation) =>\n          reservation.status === \"booked\" || reservation.status === \"seated\"\n      );\n\n      setReservations(\n        (reservations) =>\n          (reservations = result.sort(\n            (resA, resB) => resA.reservation_time > resB.reservation_time\n          ))\n      );\n    } catch (error) {\n      setReservationsError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  // call api to load tables data\n  async function loadTables() {\n    setTables((tables) => (tables = []));\n    setTablesError((error) => (error = null));\n    const { tableId } = finishIds;\n    const abortController = new AbortController();\n    try {\n      if (tableId) {\n        try {\n          await finishReservation(tableId, abortController.signal);\n          setFinishIds({ ...finishIds, tableId: \"\" });\n        } catch (error) {\n          setTablesError(error);\n        }\n      }\n      const fetchedTables = await listTables(abortController.signal);\n      setTables((tables) => (tables = fetchedTables));\n    } catch (error) {\n      setTablesError(error);\n    }\n\n    return () => abortController.abort();\n  }\n  // handle state when finish button is pressed\n  function finishHandler({ target }) {\n    if (\n      window.confirm(\n        \"Is this table ready to seat new guests? This cannot be undone.\"\n      )\n    ) {\n      setFinishIds(\n        (ids) =>\n          (ids = {\n            tableId: target.dataset.tableIdFinish,\n            resId: target.dataset.reservationIdFinish,\n          })\n      );\n    }\n  }\n\n  // format tables list to jsx elements\n  const tablesList = tables.map((table) => {\n    let backgroundColor = table.reservation_id?\"occupied\":\"free\"\n    return (\n      <li className={`list-group-item ${backgroundColor}`} key={table.table_id}>\n        <div>\n          <card className=\"row\">\n            <div className=\"col\">\n              <h4>Table Name</h4>\n              <p>{table.table_name}</p>\n              <h4>Table Capacity</h4>\n              <p>{table.capacity}</p>\n            </div>\n            {table.reservation_id ? (\n              <div className=\"row\">\n                <div className=\"col\">\n                  <span\n                    className=\"badge bg-success\"\n                    data-table-id-status={table.table_id}\n                  >\n                    occupied\n                  </span>\n                  <br />\n                  <button\n                    onClick={finishHandler}\n                    data-table-id-finish={table.table_id}\n                    data-reservation-id-finish={table.reservation_id}\n                    className=\"btn btn-danger\"\n                  >\n                    Finish\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <span className=\"badge bg-primary\">free</span>\n              </div>\n            )}\n          </card>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <main className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Dashboard</h1>\n          <div className=\"d-md-flex mb-3\">\n            <h5 className=\"mb-0\">Reservations for date: {date}</h5>\n          </div>\n          <div className=\"col\">\n            <h2>Tables</h2>\n            <ErrorAlert error={tablesError} />\n            <ul className=\"list-group\">{tablesList}</ul>\n          </div>\n          <div className=\"col\">\n            <h2>Reservations</h2>\n            <ErrorAlert error={reservationsError} />\n            <ul className=\"list-group\">\n              {\n                <ReservationCard\n                  reservations={reservations}\n                  cancelled={cancelled}\n                  setCancelled={setCancelled}\n                />\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Dashboard;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/date-time.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/layout/ErrorAlert.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/api.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/utils/format-reservation-date.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewTable.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Edit.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/NewReservation.js",[],"/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/SeatReservation.js",["83"],"import React, { useState, useEffect } from \"react\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport {\n  listTables,\n  assignResIdToTable,\n  getReservation,\n  changeStatus,\n} from \"../utils/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nfunction SeatReservation() {\n  const { reservation_id } = useParams();\n  const history = useHistory();\n\n  ////// \\/ load tables \\/ \\\\\\\\\\\\\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n  useEffect(loadTables, [reservation_id]);\n\n  function loadTables() {\n    const abortController = new AbortController();\n    setTablesError(null);\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\n    return () => abortController.abort();\n  }\n\n  const tablesList = tables.map((table) => {\n    if (!table.reservation_id) {\n      return (\n        <option\n          key={table.table_id}\n          value={table.table_id}\n          name={table.table_name}\n          cap={table.capacity}\n        >\n          {table.table_name} - {table.capacity}\n        </option>\n      );\n    } else {\n      return null;\n    }\n  });\n\n  // \\/Load reservation\\/ \\\\\n  useEffect(() => {\n    loadReservationData();\n  }, []);\n\n  const [reservation, setReservation] = useState(\"\");\n  const [reservationError, setReservationError] = useState(null);\n  const [reservationElement, setReservationElement] = useState(\"\");\n\n  async function loadReservationData() {\n    const abortController = new AbortController();\n    try {\n      const reservation = await getReservation(\n        reservation_id,\n        abortController.signal\n      );\n      setReservation(reservation);\n      setReservationElement(\n        (reservationElement) =>\n          (reservationElement = (\n            <div>\n              <h4>The {reservation.last_name} party</h4>\n              <h5>Reservation Holder:</h5>{\" \"}\n              <p>\n                {reservation.last_name}, {reservation.first_name}\n              </p>\n              <h5>Phone Number</h5> <p>{reservation.mobile_number}</p>\n              <h5>Party of:</h5> <p>{reservation.people} people</p>\n              <h5>Reservation Time</h5>\n              <p>{reservation.reservation_time}</p>\n            </div>\n          ))\n      );\n    } catch (error) {\n      setReservationError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  // \\/handle select state\\/ \\\\\n\n  const [selection, setSelection] = useState(\"select a table\");\n  const [tableCap, setTableCap] = useState(\"\");\n  const [partyIsSmallerThanCap, setPartyIsSmallerThanCap] = useState(true);\n  const [nothingSelected, setNothingSelected] = useState(true);\n\n  function handleChange(event) {\n    setNothingSelected(false);\n    let count = 0;\n    while (event.target[count]) {\n      if (event.target[count].getAttribute(\"value\") === event.target.value) {\n        const tableCap = event.target[count].getAttribute(\"cap\");\n        setTableCap(tableCap);\n      }\n      setSelection(event.target.value);\n      count++;\n    }\n  }\n\n  /// \\/ assign table \\/ \\\\\\\\\n\n  function partyIsSmallerThanCapacity() {\n    return Number(tableCap) >= Number(reservation.people);\n  }\n\n  async function handleSubmit(event) {\n    const abortController = new AbortController();\n    event.preventDefault();\n    const partyIsSmallerThanCap = partyIsSmallerThanCapacity();\n\n    if (partyIsSmallerThanCap) {\n      setPartyIsSmallerThanCap(true);\n      await changeStatus(\"seated\", reservation_id);\n      await assignResIdToTable(\n        reservation_id,\n        selection,\n        abortController.signal\n      );\n      history.push(`/dashboard?date=${reservation.reservation_date}`);\n    } else {\n      setPartyIsSmallerThanCap(false);\n    }\n    return () => abortController.abort();\n  }\n\n  function handleCancel() {\n    history.push(`/dashboard?date=${reservation.reservation_date}`);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\"></div>\n      <h4>Choose table to seat reservation #{reservation_id}</h4>\n      <div>\n        <h3>Reservation information:</h3>\n        <ErrorAlert error={reservationError} />\n        {reservationElement}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <h5>Available tables:</h5>\n          <ErrorAlert error={tablesError} />\n          <select name=\"table_id\" onChange={handleChange}>\n            {nothingSelected ? <option>select a table</option> : null}\n            {tablesList}\n          </select>\n        </label>\n        <div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Seat Table\n          </button>\n          <button\n            type=\"reset\"\n            onClick={handleCancel}\n            className=\"btn btn-warning\"\n          >\n            Cancel\n          </button>\n          <div>\n            {partyIsSmallerThanCap ? null : (\n              <p className=\"alert alert-danger\">\n                Please make a new table selection. (Capacity may be too small\n                for reservation.)\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SeatReservation;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/Search.js",["84"],"import React, { useEffect, useState } from \"react\";\nimport { searchByNumber } from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"./ReservationCard\";\n\nfunction Search() {\n  const placeholder = \"Enter a customer's phone number\";\n  const [reservations, setReservations] = useState([]);\n  const [mobile_number, setMobileNumber] = useState(placeholder);\n  const [searchError, setSearchError] = useState(\"\");\n  const [emptySearch, setEmptySearch] = useState(true);\n  const [noResultsFound, setNoResultsFound] = useState(false);\n  useEffect(() => {\n    loadReservations();\n  }, [mobile_number]);\n\n  async function loadReservations() {\n    try {\n      if (mobile_number) {\n        const reservationResults = await searchByNumber(mobile_number);\n        setReservations(reservationResults);\n        if (\n          mobile_number &&\n          !reservations.length &&\n          mobile_number !== placeholder\n        ) {\n          setNoResultsFound(true);\n        }\n      } else {\n        setNoResultsFound(false);\n      }\n    } catch (error) {\n      setSearchError(error);\n    }\n  }\n\n  function search(value) {\n    if (value) {\n      setEmptySearch(false);\n      setMobileNumber(value);\n    } else {\n      setEmptySearch(true);\n      setMobileNumber(value);\n    }\n  }\n\n  function onChange({ target: { value } }) {\n    if (value !== \" \") search(value);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    search(mobile_number);\n  }\n\n  const noResultsFoundElement = (\n    <div>\n      <h5>No reservations found</h5>\n    </div>\n  );\n\n  const emptySearchElement = (\n    <div className=\"row justify-content-center\">\n      <h4>Enter a mobile number to search reservations.</h4>\n    </div>\n  );\n\n  return (\n    <div style={{ margin: \"30px 0 30px 30px\" }}>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <ErrorAlert error={searchError} />\n          <div className=\"row align-items-end\">\n            <div className=\"col\">\n              <label className=\"w-100\">\n                <h5>Search by mobile number:</h5>\n                <input\n                  className=\"w-75 p-1\"\n                  type=\"search\"\n                  value={mobile_number}\n                  onChange={onChange}\n                  name=\"mobile_number\"\n                ></input>\n              </label>\n            </div>\n            <div className=\"col\">\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Find\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n      <div className=\"col p-5\">\n        {emptySearch ? (\n          emptySearchElement\n        ) : (\n          <ReservationCard reservations={reservations} />\n        )}\n      </div>\n      <div className=\"col\">{noResultsFound ? noResultsFoundElement : null}</div>\n    </div>\n  );\n}\n\nexport default Search;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationForm.js",["85"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { createReservation, editReservation } from \"../utils/api\";\nimport { today, formatDate, asDateString } from \"../utils/date-time\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nconst newToday = today();\n\nfunction ReservationForm({ initialFormData }) {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const isEdit = pathname.includes(\"edit\");\n  const isNew = pathname.includes(\"new\");\n\n\n  const [reservation, setReservation] = useState({ ...initialFormData });\n  const [error, setError] = useState(null);\n  const [validDate, setValidDate] = useState(true);\n  const [validTime, setValidTime] = useState(true);\n\n  useEffect(() => {\n    let dateChosen = new Date(initialFormData.reservation_date);\n    if (isEdit) {\n      setReservation({\n        ...initialFormData,\n        reservation_date: asDateString(dateChosen),\n      });\n    }\n  }, [initialFormData]);\n\n  function validReservationDates({ target }) {\n    // dates must be in converted from yyyy/mm/dd to mm/dd/yyyy for Date.prototype conversion\n    const dateChosen = new Date(formatDate(target.value));\n    const today = new Date(formatDate(newToday));\n    const isNotTuesday = dateChosen.getDay() !== 2; // 2 = tuesday's index\n    const isThisDayOrAfter = dateChosen.getDate() >= today.getDate();\n    const isThisMonthOrAfter = dateChosen.getMonth() >= today.getMonth();\n    const isThisYearOrAfter = dateChosen.getFullYear() >= today.getFullYear();\n    if (\n      isNotTuesday &&\n      isThisDayOrAfter &&\n      isThisMonthOrAfter &&\n      isThisYearOrAfter\n    ) {\n      setValidDate(true);\n      setReservation(\n        (form) => (form = { ...form, reservation_date: target.value })\n      );\n    } else {\n      setReservation((form) => (form = { ...form, reservation_date: \"\" }));\n      setValidDate(false);\n    }\n  }\n\n  function validReservationTimes({ target }) {\n    let timeChosen = target.value;\n    let chosenMinutes = Number(`${timeChosen[3]}${timeChosen[4]}`);\n    let chosenHour = Number(`${timeChosen[0]}${timeChosen[1]}`);\n    const MintoNextHalfHour = 30 - chosenMinutes;\n    timeChosen = timeChosen.split(\"\");\n    timeChosen = timeChosen.splice(0, 2);\n\n    const currentTime = new Date(Date.now());\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n\n    if (chosenMinutes === 30) {\n      timeChosen = `${timeChosen.join(\"\")}:${chosenMinutes}`;\n    } else if (chosenMinutes === 0) {\n      timeChosen = `${timeChosen.join(\"\")}:${chosenMinutes}0`;\n    } else if (MintoNextHalfHour > 0) {\n      timeChosen = `${timeChosen.join(\"\")}:30`;\n      chosenMinutes = 30;\n    } else if (MintoNextHalfHour < 0) {\n      chosenHour = Number(timeChosen.join(\"\")) + 1;\n      timeChosen = `${chosenHour}:00`;\n      chosenMinutes = 0;\n    }\n\n    //return error message if chosen time is outsisde operating hours\n    if (\n      (chosenHour === 21 && chosenMinutes === 30) ||\n      chosenHour > 21 ||\n      (chosenHour === 10 && chosenMinutes === 0) ||\n      chosenHour < 10\n    ) {\n      setReservation((form) => (form = { ...form, reservation_time: \"\" }));\n      return setValidTime(false);\n    } else {\n      setValidTime(true);\n    }\n\n    if (reservation.reservation_date === newToday) {\n      // if the chosen hour is later than the current hour (current hour is less than chosen hour) set reservation time\n      if (currentHour < chosenHour) {\n        setValidTime(true);\n        setReservation(\n          (form) => (form = { ...form, reservation_time: timeChosen })\n        );\n      }\n      // if the chosen hour is earlier than the current hour (current hour is greater than the chosen hour ) display error message\n      else if (currentHour > chosenHour) {\n        setValidTime(false);\n      }\n      // if hours are the same check minutes\n      else {\n        // if the chosen minute is later than the current minute ( current minute is less than the chosen minute ) set reservation time\n        if (currentMinute < chosenMinutes) {\n          setValidTime(true);\n          setReservation(\n            (form) => (form = { ...form, reservation_time: timeChosen })\n          );\n        }\n        // if the chosen minute is earlier than the current minute (current minute is greater than chosen minute) display error message\n        else {\n          setValidTime(false);\n        }\n      }\n    } else {\n      setReservation(\n        (form) => (form = { ...form, reservation_time: timeChosen })\n      );\n    }\n  }\n\n  function handleChange({ target: { name, value } }) {\n    setReservation({ ...reservation, [name]: value });\n  }\n\n  async function APIOnSubmit(event) {\n    const abortController = new AbortController();\n    setError(null)\n    //if this is an edit: call editReservation from API, else: call is createReservation from API\n    if (isEdit) {\n      try {\n        await editReservation(\n          reservation,\n          reservation.reservation_id,\n          abortController.signal\n        );\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    } else if (isNew) {\n      try {\n        await createReservation(reservation, abortController.signal);\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    }\n\n    return () => abortController.abort();\n  }\n\n  function navigateToDashboard() {\n      setReservation({ ...initialFormData });\n      history.push(`/dashboard?date=${reservation.reservation_date}`);\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    APIOnSubmit(event);\n  }\n  return (\n    <div>\n      <div>\n        <ErrorAlert error={error} />\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label for=\"first_name\">First Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"first_name\"\n              value={reservation.first_name}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label for=\"last_name\">Last Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"last_name\"\n              value={reservation.last_name}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label for=\"mobile_number\">Mobile Number</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"mobile_number\"\n              value={reservation.mobile_number}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label for=\"people\">Party Size</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"people\"\n              value={reservation.people}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label for=\"reservation_date\">Date of Reservation</label>\n            <br />\n            <input\n              type=\"date\"\n              onChange={validReservationDates}\n              name=\"reservation_date\"\n              value={reservation.reservation_date}\n              required={true}\n            />\n            <div>\n              {validDate ? null : (\n                <p className=\"alert alert-danger\">\n                  Please enter a valid date. (We are closed on tuesdays)\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"col\">\n            <label for=\"reservation_time\">Time of Reservation</label>\n            <br />\n            <input\n              type=\"time\"\n              step=\"300\"\n              min=\"10:30\"\n              max=\"21:30\"\n              onChange={validReservationTimes}\n              name=\"reservation_time\"\n              value={reservation.reservation_time}\n              required={true}\n            />\n            <div>\n              {validTime ? null : (\n                <p className=\"alert alert-danger\">\n                  Please enter a valid time. (We reserve tables from 10:30AM to\n                  9:30PM on every half hour.)\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n        <div\n          style={{ margin: \"25px 0 0 0\" }}\n          className=\"row w-75 justify-content-center\"\n        >\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Submit\n          </button>\n          <button\n            onClick={() =>\n              history.push(`/dashboard?date=${reservation.reservation_date}`)\n            }\n            className=\"btn btn-secondary\"\n            type=\"cancel\"\n          >\n            Cancel\n          </button>\n          {isEdit ? (\n            <div>\n              <button className=\"btn btn-danger\">Cancel Reservation</button>\n            </div>\n          ) : null}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ReservationForm;\n","/Users/keith/Documents/thinkful/periodic-tables/periodic-tables/front-end/src/ReservationsAndTables/ReservationCard.js",["86","87"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./ReservationCard.css\";\nfunction ReservationCard({ reservations, setCancelled }) {\n  const [reservationElements, setReservationElements] = useState([]);\n  const { pathname } = useLocation();\n\n  const isSearch = pathname.includes(\"search\")\n\n  //implement into dashboard\n  useEffect(() => {\n    setReservationElements(formatElements(reservations));\n  }, [reservations]);\n\n  function cancelBtnHandler({ target }) {\n    if (\n      window.confirm(\n        \"Do you want to cancel this reservation? This cannot be undone.\"\n      )\n    ) {\n      setCancelled(\n        (cancelled) => (cancelled = target.dataset.reservationIdCancel)\n      );\n    }\n  }\n\n  function formatElements(reservations) {\n    const formattedReservationElements = reservations.map((reservation) => {\n      const {\n        status,\n        reservation_id,\n        reservation_time,\n        reservation_date,\n        first_name,\n        last_name,\n        people,\n        created_at,\n        mobile_number,\n      } = reservation;\n\n      // reservations can only be canceled, seated, or edited if they have status \"booked\"\n      const booked = status === \"booked\";\n      const buttons = (\n        <div className=\"row justify-content-end\">\n          <div>\n            <a\n              className=\"btn btn-outline-warning\"\n              href={`/reservations/${reservation_id}/edit`}\n              role=\"button\"\n            >\n              Edit\n            </a>\n          </div>\n          <div>\n            {}\n            <button\n              className=\"btn btn-outline-danger\"\n              onClick={cancelBtnHandler}\n              data-reservation-id-cancel={reservation.reservation_id}\n            >\n              Cancel\n            </button>\n          </div>\n          <a\n            href={`/reservations/${reservation_id}/seat`}\n            role=\"button\"\n            className=\"btn btn-outline-primary\"\n          >\n            Seat\n          </a>\n        </div>\n      );\n\n      const reservationElement = (\n        <div\n          className=\"card\"\n          key={reservation_id}\n          style={{ marginBottom: \"5px\" }}\n        >\n          <div className=\"row justify-content-between\">\n            <h3>\n              {last_name}, {first_name}\n            </h3>\n            <div>\n              <span\n                className=\"badge bg-primary\"\n                data-reservation-id-status={reservation.reservation_id}\n              >\n                {status}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col\">\n              <h5>Mobile Number</h5>\n              <p>{mobile_number}</p>\n            </div>\n            <div className=\"col\">\n              <h5>Date and Time:</h5>\n              <p>\n                {reservation_date}, {reservation_time}\n              </p>\n            </div>\n            <div className=\"col\">\n              <h5>Party Size:</h5>\n              <p>{people}</p>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"row align-items-end\">\n              <p className=\"col-5 \" style={{ marginLeft: \"20px\" }}>\n                Created at: {created_at}\n              </p>\n              <p className=\"col\">Reservation ID: {reservation_id}</p>\n            </div>\n            <div className=\"col\">{booked && !isSearch ? buttons : null}</div>\n          </div>\n        </div>\n      );\n      if (status !== \"cancelled\") {\n        return reservationElement;\n      }\n    });\n    return formattedReservationElements;\n  }\n\n  return reservationElements;\n}\n\nexport default ReservationCard;\n",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":51,"column":6,"nodeType":"94","endLine":51,"endColumn":34,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":47,"column":6,"nodeType":"94","endLine":47,"endColumn":8,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"98","line":15,"column":6,"nodeType":"94","endLine":15,"endColumn":21,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"100","line":28,"column":6,"nodeType":"94","endLine":28,"endColumn":23,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":13,"column":6,"nodeType":"94","endLine":13,"endColumn":20,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":28,"column":73,"nodeType":"106","messageId":"107","endLine":28,"endColumn":75},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadReservations' and 'loadTables'. Either include them or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'loadReservationData'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'loadReservations'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has a missing dependency: 'formatElements'. Either include it or remove the dependency array.",["114"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [date, cancelled, finishIds, loadTables, loadReservations]",{"range":"125","text":"126"},"Update the dependencies array to be: [loadReservationData]",{"range":"127","text":"128"},"Update the dependencies array to be: [loadReservations, mobile_number]",{"range":"129","text":"130"},"Update the dependencies array to be: [initialFormData, isEdit]",{"range":"131","text":"132"},"Update the dependencies array to be: [formatElements, reservations]",{"range":"133","text":"134"},[1533,1561],"[date, cancelled, finishIds, loadTables, loadReservations]",[1219,1221],"[loadReservationData]",[617,632],"[loadReservations, mobile_number]",[979,996],"[initialFormData, isEdit]",[460,474],"[formatElements, reservations]"]