[{"/Users/keith/development/periodic-tables-frontend/src/index.js":"1","/Users/keith/development/periodic-tables-frontend/src/App.js":"2","/Users/keith/development/periodic-tables-frontend/src/layout/Layout.js":"3","/Users/keith/development/periodic-tables-frontend/src/layout/Routes.js":"4","/Users/keith/development/periodic-tables-frontend/src/layout/Menu.js":"5","/Users/keith/development/periodic-tables-frontend/src/layout/NotFound.js":"6","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/NewReservation.js":"7","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/NewTable.js":"8","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/Edit.js":"9","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/Search.js":"10","/Users/keith/development/periodic-tables-frontend/src/dashboard/Dashboard.js":"11","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/SeatReservation.js":"12","/Users/keith/development/periodic-tables-frontend/src/utils/date-time.js":"13","/Users/keith/development/periodic-tables-frontend/src/layout/ErrorAlert.js":"14","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/ReservationForm.js":"15","/Users/keith/development/periodic-tables-frontend/src/utils/api.js":"16","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/ReservationCard.js":"17","/Users/keith/development/periodic-tables-frontend/src/utils/format-reservation-date.js":"18"},{"size":286,"mtime":1662767550930,"results":"19","hashOfConfig":"20"},{"size":333,"mtime":1662767550928,"results":"21","hashOfConfig":"20"},{"size":564,"mtime":1663020259252,"results":"22","hashOfConfig":"20"},{"size":1463,"mtime":1662767550931,"results":"23","hashOfConfig":"20"},{"size":1794,"mtime":1662767550931,"results":"24","hashOfConfig":"20"},{"size":327,"mtime":1662767550931,"results":"25","hashOfConfig":"20"},{"size":693,"mtime":1662767550928,"results":"26","hashOfConfig":"20"},{"size":2409,"mtime":1662767550928,"results":"27","hashOfConfig":"20"},{"size":785,"mtime":1662767550928,"results":"28","hashOfConfig":"20"},{"size":3162,"mtime":1662767550929,"results":"29","hashOfConfig":"20"},{"size":7420,"mtime":1662767550930,"results":"30","hashOfConfig":"20"},{"size":5126,"mtime":1662767550930,"results":"31","hashOfConfig":"20"},{"size":2565,"mtime":1662767550932,"results":"32","hashOfConfig":"20"},{"size":486,"mtime":1662767550930,"results":"33","hashOfConfig":"20"},{"size":9572,"mtime":1662767550929,"results":"34","hashOfConfig":"20"},{"size":4868,"mtime":1662768456526,"results":"35","hashOfConfig":"20"},{"size":5112,"mtime":1662767550929,"results":"36","hashOfConfig":"20"},{"size":628,"mtime":1662767550932,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"traq4r",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/keith/development/periodic-tables-frontend/src/index.js",[],"/Users/keith/development/periodic-tables-frontend/src/App.js",[],"/Users/keith/development/periodic-tables-frontend/src/layout/Layout.js",[],"/Users/keith/development/periodic-tables-frontend/src/layout/Routes.js",[],"/Users/keith/development/periodic-tables-frontend/src/layout/Menu.js",[],"/Users/keith/development/periodic-tables-frontend/src/layout/NotFound.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/NewReservation.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/NewTable.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/Edit.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/Search.js",["79","80"],"import React, { useEffect, useState } from \"react\";\nimport { searchByNumber } from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"./ReservationCard\";\n\nfunction Search() {\n  const placeholder = \"Enter a customer's phone number\";\n  const [reservations, setReservations] = useState([]);\n  const [mobile_number, setMobileNumber] = useState(placeholder);\n  const [searchError, setSearchError] = useState(\"\");\n  const [emptySearch, setEmptySearch] = useState(true);\n  const [noResultsFound, setNoResultsFound] = useState(true);\n  const [clicked, setClicked] = useState(0)\n  useEffect(() => {\n    loadReservations();\n  }, [mobile_number, clicked]);\n\n  async function loadReservations() {\n    try {\n      if (mobile_number) {\n        const reservationResults = await searchByNumber(mobile_number);\n        setReservations(reservationResults);\n        setNoResultsFound(false)\n        if (\n          mobile_number &&\n          !reservations.length &&\n          mobile_number !== placeholder\n        ) {\n          setNoResultsFound(true);\n        }\n      } else {\n        setNoResultsFound(true);\n      }\n    } catch (error) {\n      setSearchError(error);\n      setNoResultsFound(true);\n\n    }\n  }\n\n  function search(value) {\n    if (value) {\n      setEmptySearch(false);\n      setMobileNumber(value);\n    } else {\n      setEmptySearch(true);\n      setMobileNumber(value);\n    }\n  }\n\n  function onChange({ target: { value } }) {\n    if (value !== \" \" || value !== \"\" ) search(value);\n  }\n\n  function handleSubmit(event) {\n    if(event){\n      event.preventDefault();\n    }\n    search(mobile_number);\n  }\n\n  const noResultsFoundElement = (\n    <div>\n      <h5>No reservations found</h5>\n    </div>\n  );\n\n  const emptySearchElement = (\n    <div className=\"row justify-content-center\">\n      <h4>Enter a mobile number to search reservations.</h4>\n    </div>\n  );\n\n  return (\n    <div style={{ margin: \"30px 0 30px 30px\" }}>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <ErrorAlert error={searchError} />\n          <div className=\"row align-items-end\">\n            <div className=\"col\">\n              <label className=\"w-100\">\n                <h5>Search by mobile number:</h5>\n                <input\n                  className=\"w-75 p-1\"\n                  type=\"search\"\n                  value={mobile_number}\n                  onClick={() => {if (mobile_number === placeholder) setMobileNumber(\"\")}}\n                  onChange={onChange}\n                  name=\"mobile_number\"\n                ></input>\n              </label>\n            </div>\n            <div className=\"col\">\n              <button type=\"submit\" role=\"button\" onClick={()=>{setClicked(clicked + 1)}} className=\"btn btn-primary\">\n                Find\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n      <div className=\"col p-5\">\n        {emptySearch ? (\n          emptySearchElement\n        ) : (\n          <ReservationCard reservations={reservations} />\n        )}\n      </div>\n      <div className=\"col\">{noResultsFound ? noResultsFoundElement : null}</div>\n    </div>\n  );\n}\n\nexport default Search;\n","/Users/keith/development/periodic-tables-frontend/src/dashboard/Dashboard.js",["81","82","83"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport {\n  listReservations,\n  listTables,\n  finishReservation,\n  changeStatus,\n  deleteTableAPI,\n} from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport ReservationCard from \"../ReservationsAndTables/ReservationCard\";\nimport \"./Dashboard.css\";\n\n/**\n * Defines the dashboard page.\n * @param date\n *  the date for which the user wants to view reservations.\n * @returns {JSX.Element}\n */\n\n//additional hook is needed to get query param from url\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction Dashboard({ date }) {\n  //////  \\/ load reservations \\/  //////\n  //overide default date if \"date\" is present in query param\n  let location = useQuery().get(\"date\");\n  if (location) date = location;\n\n  //states for reservation data and errors\n  const [reservations, setReservations] = useState([]);\n  const [reservationsError, setReservationsError] = useState(null);\n\n  //states for finishing or canceling reservations\n  const [finishIds, setFinishIds] = useState({ tableId: \"\", resId: \"\" });\n  const [cancelled, setCancelled] = useState(\"\");\n\n  //states for tables data and errors\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n  const [tablesLoaded, setTablesLoaded] = useState(false);\n  const [reservationsLoaded, setReservationsLoaded] = useState(false)\n\n  //called on initial render and state update to render table\n  //and reservation data\n  useEffect(() => {\n    if (!tablesLoaded || finishIds) {\n      loadTables();\n      setTablesLoaded(true);\n      setReservationsLoaded(false)\n      if (cancelled) {\n        changeStatusCancel(cancelled);\n      }\n    } \n  }, [date, cancelled, finishIds, tablesLoaded]);\n\n\n  // call api to cancel reservation\n  async function changeStatusCancel(cancelledReservation) {\n    const abortController = new AbortController();\n    await changeStatus(\n      \"cancelled\",\n      cancelledReservation,\n      abortController.signal\n    );\n    setCancelled((cancelled) => (cancelled = \"\"));\n    return () => abortController.abort();\n  }\n\n  \n\n  // call api to load tables data\n  async function loadTables() {\n    setTablesLoaded(false);\n    setTables((tables) => (tables = []));\n    setTablesError((error) => (error = null));\n    const { tableId } = finishIds;\n    const abortController = new AbortController();\n    try {\n      if (tableId) {\n        try {\n          await finishReservation(tableId, abortController.signal);\n          setFinishIds({ ...finishIds, tableId: \"\" });\n        } catch (error) {\n          setTablesError(error);\n        }\n      }\n      const fetchedTables = await listTables(abortController.signal);\n      setTables((tbls) => (tbls = fetchedTables));\n    } catch (error) {\n      setTablesError(error);\n    }\n\n    return () => abortController.abort();\n  }\n  // handle state when finish button is pressed\n  function finishHandler({ target }) {\n    if (\n      window.confirm(\n        \"Is this table ready to seat new guests? This action cannot be undone.\"\n      )\n    ) {\n      setFinishIds({\n        tableId: target.dataset.tableIdFinish,\n        resId: target.dataset.reservationIdFinish,\n      });\n    }\n  }\n\n  async function deleteTable(event) {\n    const abortController = new AbortController();\n\n    if (\n      window.confirm(\n        \"Do you want to delete this table? This action cannot be undone.\"\n      )\n    ) {\n      try {\n        await deleteTableAPI(\n          event.target.dataset.table_id,\n          abortController.signal\n        )\n        setTablesLoaded(false);\n        window.alert(\"Table Deleted.\");\n      } catch (err) {\n        console.error(\"A problem occured when trying to delete table.\");\n      }\n    }\n    return () => abortController.abort();\n  }\n\n  // format tables list to jsx elements\n  const tablesList =\n    tables.length === 0 ? (\n      <li className='list-group-item free' key={0}>\n        Your tables will go here!\n      </li>\n    ) : (\n      tables.map((table) => {\n        let backgroundColor = table.reservation_id ? \"occupied\" : \"free\";\n        return (\n          <li\n            className={`list-group-item ${backgroundColor}`}\n            key={table.table_id}\n          >\n            <div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <h4>Table Name</h4>\n                  <p>{table.table_name}</p>\n                  <h4>Table Capacity</h4>\n                  <p>{table.capacity}</p>\n                  {table.reservation_id ? null : (\n                    <button\n                      disabled={table.reservation_id}\n                      className=\"btn btn-danger \"\n                      id=\"deleteTable\"\n                      onClick={deleteTable}\n                      role=\"button\"\n                      data-table_id={table.table_id}\n                    >\n                      Delete Table\n                    </button>\n                  )}\n                </div>\n                {table.reservation_id ? (\n                  <div className=\"row\">\n                    <div className=\"col\">\n                      <span\n                        className=\"badge bg-success\"\n                        data-table-id-status={table.table_id}\n                      >\n                        occupied\n                      </span>\n                      <br />\n                      <button\n                        onClick={finishHandler}\n                        data-table-id-finish={table.table_id}\n                        data-reservation-id-finish={table.reservation_id}\n                        className=\"btn btn-danger\"\n                      >\n                        Finish\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <span\n                      data-table-id-status={table.table_id}\n                      className=\"badge bg-primary\"\n                    >\n                      free\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </li>\n        );\n      })\n    );\n\n  return (\n    <main className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Dashboard</h1>\n          <div className=\"d-md-flex mb-3\">\n            <h5 className=\"mb-0\">Reservations for date: {date}</h5>\n          </div>\n          <div className=\"col\">\n            <h2>Tables</h2>\n            <ErrorAlert error={tablesError} />\n            <ul className=\"list-group\">{tablesList}</ul>\n          </div>\n          <div className=\"col\">\n            <h2>Reservations</h2>\n            <ErrorAlert error={reservationsError} />\n            <ul className=\"list-group\">\n              {\n                <ReservationCard\n                date={date}\n                setReservationsError ={setReservationsError}\n                setReservations = {setReservations}\n                  reservations={reservations}\n                  cancelled={cancelled}\n                  setCancelled={setCancelled}\n                  finishIds={finishIds}\n                  reservationsLoaded={reservationsLoaded}\n                  setReservationsLoaded = {setReservationsLoaded}\n                />\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Dashboard;\n","/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/SeatReservation.js",["84"],"import React, { useState, useEffect } from \"react\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport {\n  listTables,\n  assignResIdToTable,\n  getReservation,\n} from \"../utils/api\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nfunction SeatReservation() {\n  const { reservation_id } = useParams();\n  const history = useHistory();\n\n  ////// \\/ load tables \\/ \\\\\\\\\\\\\n  const [tables, setTables] = useState([]);\n  const [tablesError, setTablesError] = useState(null);\n  useEffect(loadTables, [reservation_id]);\n\n  function loadTables() {\n    const abortController = new AbortController();\n    setTablesError(null);\n    listTables(abortController.signal).then(setTables).catch(setTablesError);\n    return () => abortController.abort();\n  }\n\n  const tablesList = tables.map((table) => {\n    if (!table.reservation_id) {\n      return (\n        <option\n          key={table.table_id}\n          value={table.table_id}\n          name={table.table_name}\n          cap={table.capacity}\n        >\n          {table.table_name} - {table.capacity}\n        </option>\n      );\n    } else {\n      return null;\n    }\n  });\n\n  // \\/Load reservation\\/ \\\\\n  useEffect(() => {\n    loadReservationData();\n  }, []);\n\n  const [reservation, setReservation] = useState(\"\");\n  const [reservationError, setReservationError] = useState(null);\n  const [reservationElement, setReservationElement] = useState(\"\");\n\n  async function loadReservationData() {\n    const abortController = new AbortController();\n    try {\n      const reservation = await getReservation(\n        reservation_id,\n        abortController.signal\n      );\n      setReservation(reservation);\n      setReservationElement(\n        (reservationElement) =>\n          (reservationElement = (\n            <div>\n              <h4>The {reservation.last_name} party</h4>\n              <h5>Reservation Holder:</h5>{\" \"}\n              <p>\n                {reservation.last_name}, {reservation.first_name}\n              </p>\n              <h5>Phone Number</h5> <p>{reservation.mobile_number}</p>\n              <h5>Party of:</h5> <p>{reservation.people} people</p>\n              <h5>Reservation Time</h5>\n              <p>{reservation.reservation_time}</p>\n            </div>\n          ))\n      );\n    } catch (error) {\n      setReservationError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  // \\/handle select state\\/ \\\\\n\n  const [selection, setSelection] = useState(\"select a table\");\n  const [tableCap, setTableCap] = useState(\"\");\n  const [partyIsSmallerThanCap, setPartyIsSmallerThanCap] = useState(true);\n  const [nothingSelected, setNothingSelected] = useState(true);\n\n  function handleChange(event) {\n    setNothingSelected(false);\n    let count = 0;\n    while (event.target[count]) {\n      if (event.target[count].getAttribute(\"value\") === event.target.value) {\n        const tableCap = event.target[count].getAttribute(\"cap\");\n        setTableCap(tableCap);\n      }\n      setSelection(event.target.value);\n      count++;\n    }\n  }\n\n  /// \\/ assign table \\/ \\\\\\\\\n\n  function partyIsSmallerThanCapacity() {\n    return Number(tableCap) >= Number(reservation.people);\n  }\n\n  async function handleSubmit(event) {\n    const abortController = new AbortController();\n    event.preventDefault();\n    const partyIsSmallerThanCap = partyIsSmallerThanCapacity();\n\n    if (partyIsSmallerThanCap) {\n      setPartyIsSmallerThanCap(true);\n      //await changeStatus(\"seated\", reservation_id);\n      await assignResIdToTable(\n        reservation_id,\n        selection,\n        abortController.signal\n      );\n      history.push(`/dashboard?date=${reservation.reservation_date.substring(0,10)}`);\n    } else {\n      setPartyIsSmallerThanCap(false);\n    }\n    return () => abortController.abort();\n  }\n\n  function handleCancel() {\n    history.push(`/dashboard?date=${reservation.reservation_date.substring(0,10)}`);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\"></div>\n      <h4>Choose table to seat reservation #{reservation_id}</h4>\n      <div>\n        <h3>Reservation information:</h3>\n        <ErrorAlert error={reservationError} />\n        {reservationElement}\n      </div>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <h5>Available tables:</h5>\n          <ErrorAlert error={tablesError} />\n          <select name=\"table_id\" onChange={handleChange}>\n            {nothingSelected ? <option>select a table</option> : null}\n            {tablesList}\n          </select>\n        </label>\n        <div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Seat Table\n          </button>\n          <button\n            type=\"reset\"\n            onClick={handleCancel}\n            className=\"btn btn-warning\"\n          >\n            Cancel\n          </button>\n          <div>\n            {partyIsSmallerThanCap ? null : (\n              <p className=\"alert alert-danger\">\n                Please make a new table selection. (Capacity may be too small\n                for reservation.)\n              </p>\n            )}\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SeatReservation;\n","/Users/keith/development/periodic-tables-frontend/src/utils/date-time.js",[],"/Users/keith/development/periodic-tables-frontend/src/layout/ErrorAlert.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/ReservationForm.js",["85","86"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { createReservation, editReservation } from \"../utils/api\";\nimport { today, formatDate, asDateString } from \"../utils/date-time\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport { changeStatus } from \"../utils/api\";\n\nconst newToday = today();\n\nfunction ReservationForm({ initialFormData }) {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const isEdit = pathname.includes(\"edit\");\n  const isNew = pathname.includes(\"new\");\n\n  const [reservation, setReservation] = useState({ ...initialFormData });\n  const [error, setError] = useState(\"\");\n  const [submitAttempt, setSubmitAttempt] = useState(false);\n\n  useEffect(() => {\n    let dateChosen = new Date(initialFormData.reservation_date);\n    if (isEdit) {\n      setReservation({\n        ...initialFormData,\n        reservation_date: asDateString(dateChosen),\n      });\n    }\n  }, [initialFormData]);\n\n  function validReservationDates({ target }) {\n    // dates must be in converted from yyyy/mm/dd to mm/dd/yyyy for Date.prototype conversion\n    const dateChosen = new Date(formatDate(target.value));\n    const today = new Date(formatDate(newToday));\n    const isNotTuesday = dateChosen.getDay() !== 2; // 2 = tuesday's index\n    const isThisDayOrAfter = dateChosen.getDate() >= today.getDate();\n    const isThisMonthOrAfter = dateChosen.getMonth() >= today.getMonth();\n    const isThisYearOrAfter = dateChosen.getFullYear() >= today.getFullYear();\n    const isAfterThisYear = dateChosen.getFullYear() - today.getFullYear() > 0;\n    if (\n      (isNotTuesday &&\n        isThisDayOrAfter &&\n        isThisMonthOrAfter &&\n        isThisYearOrAfter) ||\n      isAfterThisYear\n    ) {\n      setError(\"\");\n      setSubmitAttempt(false);\n      setReservation(\n        (form) => (form = { ...form, reservation_date: target.value })\n      );\n    } else {\n      setReservation(\n        (form) => (form = { ...form, reservation_date: target.value })\n      );\n      setError({\n        message: \"Please enter a valid date. (We are closed on tuesdays)\",\n      });\n    }\n\n    // validate time in case date was set after time\n    validReservationTimes()\n  }\n\n  function badTime() {\n    setError({\n      message:\n        \"Please enter a valid time. (We reserve tables from 10:30AM to 9:30PM.)\",\n    });\n  }\n\n  function validReservationTimes({ target } = reservation.reservation_time) {\n    let timeChosen \n\n    if(target){\n      timeChosen = target.value;\n    } else {\n      timeChosen = reservation.reservation_time\n    }\n\n    setReservation(\n      (form) => (form = { ...form, reservation_time: timeChosen })\n    );\n\n    let chosenMinutes = Number(`${timeChosen[3]}${timeChosen[4]}`);\n    let chosenHour = Number(`${timeChosen[0]}${timeChosen[1]}`);\n \n\n    const currentTime = new Date(Date.now());\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n\n    \n    //return error message if chosen time is outsisde operating hours\n\n    if (\n      (chosenHour >= 21 && chosenMinutes > 30) ||\n      chosenHour > 21 ||\n      (chosenHour <= 10 && chosenMinutes < 30) ||\n      chosenHour < 10\n    ) {\n      badTime();\n    } else {\n      setError(\"\");\n      setSubmitAttempt(false);\n    }\n\n    if (reservation.reservation_date === newToday) {\n      // if the chosen hour is later than the current hour (current hour is less than chosen hour) set reservation time\n      if (currentHour < chosenHour) {\n        setError(\"\");\n        setSubmitAttempt(false);\n      }\n      // if the chosen hour is earlier than the current hour (current hour is greater than the chosen hour ) display error message\n      else if (currentHour > chosenHour) {\n        badTime();\n      }\n      // if hours are the same check minutes\n      else {\n        // if the chosen minute is later than the current minute ( current minute is less than the chosen minute ) set reservation time\n        if (currentMinute < chosenMinutes) {\n          setError(\"\");\n          setSubmitAttempt(false);\n        }\n        // if the chosen minute is earlier than the current minute (current minute is greater than chosen minute) display error message\n        else {\n          badTime();\n        }\n      }\n    }\n  }\n\n  function handleChange({ target: { name, value } }) {\n    setReservation({ ...reservation, [name]: value });\n  }\n\n  function navigateToDashboard() {\n    history.push(`/dashboard?date=${reservation.reservation_date}`);\n  }\n\n  const [cancelled, setCancelled] = useState(\"\");\n\n  useEffect(() => {\n    if (cancelled) {\n      changeStatusCancel(cancelled);\n      navigateToDashboard();\n    }\n  }, [cancelled]);\n\n  // call api to cancel reservation\n  async function changeStatusCancel(cancelledReservation) {\n    const abortController = new AbortController();\n    await changeStatus(\n      \"cancelled\",\n      cancelledReservation,\n      abortController.signal\n    );\n    setCancelled((can) => (can = \"\"));\n    return () => abortController.abort();\n  }\n\n  function cancelBtnHandler(event) {\n    event.preventDefault();\n    if (\n      window.confirm(\n        \"Do you want to cancel this reservation? This cannot be undone.\"\n      )\n    ) {\n      setCancelled((cancelled) => (cancelled = reservation.reservation_id));\n    }\n  }\n\n  async function APIOnSubmit(event) {\n    const abortController = new AbortController();\n    setError(null);\n    //if this is an edit: call editReservation from API, else: call is createReservation from API\n    if (isEdit) {\n      try {\n        await editReservation(\n          {...reservation, people:Number(reservation.people)},\n          reservation.reservation_id,\n          abortController.signal\n        );\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    } else if (isNew) {\n      try {\n        await createReservation({...reservation, people:Number(reservation.people)}, abortController.signal);\n        // navigate to dashboard is promise is resolved\n        navigateToDashboard();\n      } catch (error) {\n        //set error to display if caught\n        setError((err) => (err = error));\n      }\n    }\n\n    return () => abortController.abort();\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setSubmitAttempt(true);\n    if (!error) {\n      APIOnSubmit(event);\n    }\n  }\n  return (\n    <div>\n      <div>{submitAttempt ? <ErrorAlert error={error} /> : null}</div>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"first_name\">First Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"first_name\"\n              value={reservation.first_name}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"last_name\">Last Name</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"last_name\"\n              value={reservation.last_name}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"mobile_number\">Mobile Number</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"mobile_number\"\n              value={reservation.mobile_number}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"people\">Party Size</label>\n            <br />\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              name=\"people\"\n              value={reservation.people}\n              required={true}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <label htmlFor=\"reservation_date\">Date of Reservation</label>\n            <br />\n            <input\n              type=\"date\"\n              onChange={validReservationDates}\n              name=\"reservation_date\"\n              value={reservation.reservation_date}\n              required={true}\n            />\n          </div>\n          <div className=\"col\">\n            <label htmlFor=\"reservation_time\">Time of Reservation</label>\n            <br />\n            <input\n              type=\"time\"\n              onChange={validReservationTimes}\n              name=\"reservation_time\"\n              value={reservation.reservation_time}\n              required={true}\n            />\n          </div>\n        </div>\n        <div\n          style={{ margin: \"25px 0 0 0\" }}\n          className=\"row w-75 justify-content-center\"\n        >\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Submit\n          </button>\n          <button\n            onClick={() =>\n              history.push(`/dashboard?date=${reservation.reservation_date}`)\n            }\n            className=\"btn btn-secondary\"\n            type=\"cancel\"\n          >\n            Cancel\n          </button>\n          {isEdit ? (\n            <div>\n              <button onClick={cancelBtnHandler} className=\"btn btn-danger\">\n                Cancel Reservation\n              </button>\n            </div>\n          ) : null}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default ReservationForm;\n","/Users/keith/development/periodic-tables-frontend/src/utils/api.js",[],"/Users/keith/development/periodic-tables-frontend/src/ReservationsAndTables/ReservationCard.js",["87","88","89"],"import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { listReservations } from \"../utils/api\";\nimport \"./ReservationCard.css\";\nfunction ReservationCard({\n  reservations,\n  setCancelled,\n  date,\n  setReservationsError,\n  setReservations,\n  tablesLoaded,\n  reservationsLoaded,\n  setReservationsLoaded,\n}) {\n  const [reservationElements, setReservationElements] = useState([]);\n  const { pathname } = useLocation();\n\n  const isSearch = pathname.includes(\"search\");\n\n  useEffect(() => {\n      loadReservations()\n  }, [tablesLoaded, reservationsLoaded]);\n\n  useEffect(() => {\n    setReservationElements(formatElements(reservations));\n  }, [reservations]);\n\n  // call api to load reservation data\n  async function loadReservations() {\n    const abortController = new AbortController();\n    try {\n      setReservationsError(null);\n      const result = await listReservations({ date }, abortController.signal);\n      result.filter(\n        (reservation) =>\n          reservation.status === \"booked\" || reservation.status === \"seated\"\n      );\n\n      setReservations(\n        result.sort(\n          (resA, resB) => resA.reservation_time > resB.reservation_time\n        )\n      );\n\n      setReservationsLoaded(true);\n\n    } catch (error) {\n      setReservationsError(error);\n    }\n    return () => abortController.abort();\n  }\n\n  function cancelBtnHandler({ target }) {\n    if (\n      window.confirm(\n        \"Do you want to cancel this reservation? This cannot be undone.\"\n      )\n    ) {\n      setCancelled(\n        (cancelled) => (cancelled = target.dataset.reservationIdCancel)\n      );\n    }\n  }\n\n  function formatElements(reservations) {\n    const formattedReservationElements =\n      reservations.length === 0 ? (\n        <div className=\"card\">Your reservations will go here!</div>\n      ) : (\n        reservations.map((reservation) => {\n          const {\n            status,\n            reservation_id,\n            reservation_time,\n            reservation_date,\n            first_name,\n            last_name,\n            people,\n            created_at,\n            mobile_number,\n          } = reservation;\n\n          // reservations can only be canceled, seated, or edited if they have status \"booked\"\n          const booked = status === \"booked\";\n          const buttons = (\n            <div className=\"row justify-content-end\">\n              <div>\n                <a\n                  className=\"btn btn-outline-warning\"\n                  href={`/reservations/${reservation_id}/edit`}\n                  role=\"button\"\n                >\n                  edit\n                </a>\n              </div>\n              <div>\n                {}\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={cancelBtnHandler}\n                  data-reservation-id-cancel={reservation.reservation_id}\n                >\n                  cancel\n                </button>\n              </div>\n              <a\n                href={`/reservations/${reservation_id}/seat`}\n                role=\"button\"\n                className=\"btn btn-outline-primary\"\n              >\n                seat\n              </a>\n            </div>\n          );\n\n          const reservationElement = (\n            <div\n              className=\"card\"\n              key={reservation_id}\n              style={{ marginBottom: \"5px\" }}\n            >\n              <div className=\"row justify-content-between\">\n                <h3>\n                  {last_name}, {first_name}\n                </h3>\n                <div>\n                  <span\n                    className=\"badge bg-primary\"\n                    data-reservation-id-status={reservation.reservation_id}\n                  >\n                    {status}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col\">\n                  <h5>Mobile Number</h5>\n                  <p>{mobile_number}</p>\n                </div>\n                <div className=\"col\">\n                  <h5>Date and Time:</h5>\n                  <p>\n                    {reservation_date}, {reservation_time}\n                  </p>\n                </div>\n                <div className=\"col\">\n                  <h5>Party Size:</h5>\n                  <p>{people}</p>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"row align-items-end\">\n                  <p className=\"col-5 \" style={{ marginLeft: \"20px\" }}>\n                    Created at: {created_at}\n                  </p>\n                  <p className=\"col\">Reservation ID: {reservation_id}</p>\n                </div>\n                <div className=\"col\">\n                  {booked && !isSearch ? buttons : null}\n                </div>\n              </div>\n            </div>\n          );\n          if (status !== \"cancelled\") {\n            return reservationElement;\n          }\n        })\n      );\n    return formattedReservationElements;\n  }\n\n  return reservationElements;\n}\n\nexport default ReservationCard;\n","/Users/keith/development/periodic-tables-frontend/src/utils/format-reservation-date.js",[],{"ruleId":"90","severity":1,"message":"91","line":16,"column":6,"nodeType":"92","endLine":16,"endColumn":30,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":94,"column":15,"nodeType":"96","endLine":94,"endColumn":119},{"ruleId":"97","severity":1,"message":"98","line":4,"column":3,"nodeType":"99","messageId":"100","endLine":4,"endColumn":19},{"ruleId":"90","severity":1,"message":"101","line":57,"column":6,"nodeType":"92","endLine":57,"endColumn":48,"suggestions":"102"},{"ruleId":"94","severity":1,"message":"95","line":156,"column":21,"nodeType":"96","endLine":163,"endColumn":22},{"ruleId":"90","severity":1,"message":"103","line":46,"column":6,"nodeType":"92","endLine":46,"endColumn":8,"suggestions":"104"},{"ruleId":"90","severity":1,"message":"105","line":28,"column":6,"nodeType":"92","endLine":28,"endColumn":23,"suggestions":"106"},{"ruleId":"90","severity":1,"message":"107","line":147,"column":6,"nodeType":"92","endLine":147,"endColumn":17,"suggestions":"108"},{"ruleId":"90","severity":1,"message":"91","line":22,"column":6,"nodeType":"92","endLine":22,"endColumn":40,"suggestions":"109"},{"ruleId":"90","severity":1,"message":"110","line":26,"column":6,"nodeType":"92","endLine":26,"endColumn":20,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":70,"column":40,"nodeType":"114","messageId":"115","endLine":70,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadReservations'. Either include it or remove the dependency array.","ArrayExpression",["116"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","no-unused-vars","'listReservations' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'loadTables'. Either include it or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'loadReservationData'. Either include it or remove the dependency array.",["118"],"React Hook useEffect has a missing dependency: 'isEdit'. Either include it or remove the dependency array.",["119"],"React Hook useEffect has a missing dependency: 'navigateToDashboard'. Either include it or remove the dependency array.",["120"],["121"],"React Hook useEffect has a missing dependency: 'formatElements'. Either include it or remove the dependency array.",["122"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [mobile_number, clicked, loadReservations]",{"range":"137","text":"138"},"Update the dependencies array to be: [date, cancelled, finishIds, tablesLoaded, loadTables]",{"range":"139","text":"140"},"Update the dependencies array to be: [loadReservationData]",{"range":"141","text":"142"},"Update the dependencies array to be: [initialFormData, isEdit]",{"range":"143","text":"144"},"Update the dependencies array to be: [cancelled, navigateToDashboard]",{"range":"145","text":"146"},"Update the dependencies array to be: [tablesLoaded, reservationsLoaded, loadReservations]",{"range":"147","text":"148"},"Update the dependencies array to be: [formatElements, reservations]",{"range":"149","text":"150"},[660,684],"[mobile_number, clicked, loadReservations]",[1773,1815],"[date, cancelled, finishIds, tablesLoaded, loadTables]",[1203,1205],"[loadReservationData]",[979,996],"[initialFormData, isEdit]",[4688,4699],"[cancelled, navigateToDashboard]",[567,601],"[tablesLoaded, reservationsLoaded, loadReservations]",[688,702],"[formatElements, reservations]"]